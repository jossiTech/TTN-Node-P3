//for JT-P3 ###########################################
//                                                    #
// Arduino IDE: set to Arduino Nano with 328P         #
// Line 40-44: set your Values!!                      #
//                                                    #
//for JT-P3 ###########################################


// necessary libraries#################################
  #include <lmic.h>
  #include <hal/hal.h>
  #include <CayenneLPP.h>
  #include <OneWire.h> 
  #include <DallasTemperature.h>
  #include <DHT.h>################
// necessary libraries##################
  

//prepare 1-Wire-Busses (16 for JT-P3)##################
  #define ONE_WIRE_BUS 16
  OneWire oneWire(ONE_WIRE_BUS);   
  DallasTemperature sensor(&oneWire);
//prepare 1-Wire-Busses (16 for JT-P3)##################

//prepare DHT11-Sensor (14 for JT-P3)###################
  DHT dht11(14, DHT11);
//prepare DHT11-Sensor (JT-P3: (IDE Nano, 328p) Port 14, Typ DHT11############

// Support for CayenneLPP Dataformat####################
  CayenneLPP lpp(51);
// Support for CayenneLPP Dataformat####################


//Inital Target Temperature & Hysterese#################
  uint8_t targettemp = 20;
  uint8_t targethyst = 02;
//Inital Target Temperature & Hysterese#################

//OTAA (DevEUI=LSB, APPEUI=LSB, AppKey=MSB)#############
  static const u1_t PROGMEM DEVEUI[8]={ "fill in with your values" };
  void os_getDevEui (u1_t* buf) { memcpy_P(buf, DEVEUI, 8);}
  static const u1_t PROGMEM APPEUI[8]={ "fill in with your values" };
  void os_getArtEui (u1_t* buf) { memcpy_P(buf, APPEUI, 8);}
  static const u1_t PROGMEM APPKEY[16] = { "fill in with your values" };
  void os_getDevKey (u1_t* buf) {  memcpy_P(buf, APPKEY, 16);}
//OTAA (DevEUI=LSB, APPEUI=LSB, AppKey=MSB)#############
  
//Interval for Sending...###############################
  const unsigned TX_INTERVAL = 60;
//Interval for Sending...###############################

// PIN-Mapping JT-P3 & RFM95W ##########################
  const lmic_pinmap lmic_pins = {
        .nss = 10,
        .rxtx = LMIC_UNUSED_PIN,
        .rst = 9,
        .dio = {2, 6, 7},};
    
  static osjob_t sendjob;
// PIN-Mapping JT-P3 & RFM95W ##########################


  
//Sensors still not read...
  bool validData = false;

// Status Relais  
  bool RelaisOn = false;  

//##########################################################################################################
void setup() {
  
// Start up serial##################################
   Serial.begin(9600);
	 Serial.println("Sketch start...");
// Start up serial##################################

    
// Start up the Dallas-library######################
  sensor.begin(); 
// Start up the Dallas-library######################


// Define Relais-Port (JT-P3: A1 ###################
  pinMode(A1, OUTPUT);
// At the beginning Ralais off...
	digitalWrite(A1, LOW);
// Define Relais-Port (JT-P3: A1 ###################
	
	
// Initialize DHT11-Sensor and wait a bit ##########
  dht11.begin();
  delay(2000);
// Initialize DHT11-Sensor and wait a bit ##########
	
    
// LMIC init########################################
  os_init();
  LMIC_reset();
         //Timing f√ºr 32U4 anpassen
         //LMIC_setClockError(MAX_CLOCK_ERROR * 1 / 100);
  do_send(&sendjob);
// LMIC init########################################
}
//##########################################################################################################


//##########################################################################################################
void loop() {os_runloop_once();}
//##########################################################################################################

//##########################################################################################################
void onEvent (ev_t ev) {
    switch(ev) {
        case EV_JOINED:
                        LMIC_setDrTxpow(DR_SF9,14);
                        // Disable link check validation (automatically enabled
                        // during join, but not supported by TTN at this time).
                        LMIC_setLinkCheckMode(0);
                        break;
       case EV_TXCOMPLETE:
                          if (LMIC.dataLen) {

                                              //processing downlink
                                               uint8_t result0 = LMIC.frame[LMIC.dataBeg + 0];//Serial.print(" #Result0: "); Serial.print(result0);
                                               uint8_t result1 = LMIC.frame[LMIC.dataBeg + 1];//Serial.print(" #Result1: "); Serial.print(result1);
                                               uint8_t result2 = LMIC.frame[LMIC.dataBeg + 2];//Serial.print(" #Result2: "); Serial.print(result2);
                                               uint8_t result3 = LMIC.frame[LMIC.dataBeg + 3];//Serial.print(" #Result3: "); Serial.println(result3);
                                               
                                               targettemp = result0;
                                               targethyst = result1;
                                               //if (result0 == 1)    {digitalWrite(A1, HIGH);RelaisOn=true;}              
                                               //if (result0 == 0)    {digitalWrite(A1, LOW);RelaisOn=false;}
                              
                                              delay(1000);}
                                              // Schedule next transmission
                                              os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
                                              break;
       default:
            break;
                }
}
//##########################################################################################################


//##########################################################################################################
void do_send(osjob_t* j){
    // Check if there is not a current TX/RX job running
    if (LMIC.opmode & OP_TXRXPEND) {} 
      else {
             ReadSensors(); 
             if (validData == true) {
                                      // Prepare upstream data transmission at the next possible time.
                                      LMIC_setTxData2(1, lpp.getBuffer(), lpp.getSize(), 0);}
          
             else {  //No valid data, waiting for next iteration. Schedule next transmission
                     os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);}
           }
    // Next TX is scheduled after TX_COMPLETE event.
}
//##########################################################################################################


//##########################################################################################################
void ReadSensors() {
  validData = false;
  //Read Temp-Sensor Dallas 1-Wire
  sensor.requestTemperatures(); float temp=(sensor.getTempCByIndex(0));
  // Why "byIndex"?  You can have more than one DS18B20 on the same wire. Here are 2/4 wires. 0 refers to the first IC on the wire 


// Read DHT11 ######################################
  float humidity = dht11.readHumidity();
  float tempDHT11 = dht11.readTemperature();

  Serial.print("DHT11 Humidity : ");
  Serial.println(humidity);
  Serial.print("DHT11 Temperature : ");
  Serial.println(tempDHT11);
  
// Read DHT11 ######################################

//Data in Cayenne LPP-Format #######################
  lpp.reset();
  lpp.addRelativeHumidity(1, humidity);
  lpp.addTemperature(2, tempDHT11);
  lpp.addTemperature(3, temp);
  lpp.addTemperature(4, targettemp);
  lpp.addTemperature(5, targettemp + targethyst);
//Data in Cayenne LPP-Format #######################


  if (temp < targettemp) {RelaisOn == true; digitalWrite(A1, HIGH); lpp.addDigitalOutput(6,1);}
  if (temp > targettemp + targethyst) {RelaisOn == false; digitalWrite(A1, LOW); lpp.addDigitalOutput(6,0);}
  
  validData = true;
}
//##########################################################################################################
